{"ast":null,"code":"import * as firebase from \"firebase\"; //Rename firebase that will suit us. This means we can pull methods on firebase\n//CONNECT TO DATABASE\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDDC7umIft417JmilbhlfwJkbCD-3Cape4\",\n  authDomain: \"expensify-79aa0.firebaseapp.com\",\n  databaseURL: \"https://expensify-79aa0.firebaseio.com\",\n  projectId: \"expensify-79aa0\",\n  storageBucket: \"expensify-79aa0.appspot.com\",\n  messagingSenderId: \"314358861921\",\n  appId: \"1:314358861921:web:446fecc08e03d63862da20\",\n  measurementId: \"G-4V0D8HLLQB\"\n};\nfirebase.initializeApp(firebaseConfig); //=================\n//Grabing the database with database features\n//=================\n//Getting reference to our database example expenses, users\n\nconst database = firebase.database(); //CREATING DATA\n// database\n//   .ref()\n//   .set({\n//     // ref() referencing another collections/database\n//     //The name of our database\n//     name: \"Emmanuel\",\n//     age: 30,\n//     isSingle: true,\n//     location: {\n//       city: \"Xifeng\",\n//       country: \"China\"\n//     }\n//   })\n//   .then(() => {\n//     console.log(\"Data was saved\");\n//   })\n//   .catch(err => {\n//     console.log(\"Failed\", err);\n//   });\n//REMOVE DATA\n//Removing a single propperty\n// database\n//   .ref(\"isSingle\")\n//   .remove()\n//   .then(() => {\n//     console.log(\"Data was removed\");\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });\n//Removing the whole data\n//If you don't specify anything to ref it refers to the root of your datan=base\n// database\n//   .ref()\n//   .remove()\n//   .then(() => {\n//     console.log(\"Data was removed\");\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });\n//UPDATING\n//Update calls with an object thus the things to update\n//You can also add new property to it\n//We can also delete by passing null to the attribute\n// database.ref().update({\n//   name: \"Hicotek\",\n//   age: 31,\n//   job: \"Programmer\",\n//   \"location/city\": \"Kumasi\",\n//   single: null\n// });\n//FETCHING DATA\n//METHOD 1:\n//This fetches only once and doesn't fetch upon changes unless we make another request to\n//We can fetch data by subscribing or a signle time\n//What you pass to ref is what it will return\n// database\n//   .ref()\n//   .once(\"value\")\n//   .then(snapShot => {\n//     //We pass an argument to .then which is a snapShot which represnt the actual data\n//     //The snapShot contains a lot of functions so to pull out our data we use .val()\n//     const data = snapShot.val();\n//     console.log(data);\n//   })\n//   .catch(err => {\n//     console.log(\"Fetching data failed\", err);\n//   });\n//METHOD 2\n//Since this will keep runing overtime we don't chain with a promise. Remember that promise alo returns data and error at one time\n\ndatabase.ref().on(\"value\", snapShot => {\n  console.log(snapShot.val());\n}); //Changing data\n\nsetTimeout(() => {\n  database.ref(\"age\").set(80);\n}, 6000);","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/Projects/expenses-manager/src/firebase/firebase.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","database","ref","on","snapShot","console","log","val","setTimeout","set"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B,C,CAAsC;AAEtC;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,iCAFS;AAGrBC,EAAAA,WAAW,EAAE,wCAHQ;AAIrBC,EAAAA,SAAS,EAAE,iBAJU;AAKrBC,EAAAA,aAAa,EAAE,6BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB;AAWAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB,E,CACA;AACA;AACA;AAEA;;AAEA,MAAMU,QAAQ,GAAGX,QAAQ,CAACW,QAAT,EAAjB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEAA,QAAQ,CAACC,GAAT,GAAeC,EAAf,CAAkB,OAAlB,EAA2BC,QAAQ,IAAI;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,GAAT,EAAZ;AACD,CAFD,E,CAIA;;AAEAC,UAAU,CAAC,MAAM;AACfP,EAAAA,QAAQ,CAACC,GAAT,CAAa,KAAb,EAAoBO,GAApB,CAAwB,EAAxB;AACD,CAFS,EAEP,IAFO,CAAV","sourcesContent":["import * as firebase from \"firebase\"; //Rename firebase that will suit us. This means we can pull methods on firebase\n\n//CONNECT TO DATABASE\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDDC7umIft417JmilbhlfwJkbCD-3Cape4\",\n  authDomain: \"expensify-79aa0.firebaseapp.com\",\n  databaseURL: \"https://expensify-79aa0.firebaseio.com\",\n  projectId: \"expensify-79aa0\",\n  storageBucket: \"expensify-79aa0.appspot.com\",\n  messagingSenderId: \"314358861921\",\n  appId: \"1:314358861921:web:446fecc08e03d63862da20\",\n  measurementId: \"G-4V0D8HLLQB\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n//=================\n//Grabing the database with database features\n//=================\n\n//Getting reference to our database example expenses, users\n\nconst database = firebase.database();\n\n//CREATING DATA\n\n// database\n//   .ref()\n//   .set({\n//     // ref() referencing another collections/database\n//     //The name of our database\n//     name: \"Emmanuel\",\n//     age: 30,\n//     isSingle: true,\n//     location: {\n//       city: \"Xifeng\",\n//       country: \"China\"\n//     }\n//   })\n//   .then(() => {\n//     console.log(\"Data was saved\");\n//   })\n//   .catch(err => {\n//     console.log(\"Failed\", err);\n//   });\n\n//REMOVE DATA\n\n//Removing a single propperty\n// database\n//   .ref(\"isSingle\")\n//   .remove()\n//   .then(() => {\n//     console.log(\"Data was removed\");\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });\n\n//Removing the whole data\n\n//If you don't specify anything to ref it refers to the root of your datan=base\n\n// database\n//   .ref()\n//   .remove()\n//   .then(() => {\n//     console.log(\"Data was removed\");\n//   })\n//   .catch(err => {\n//     console.log(err);\n//   });\n\n//UPDATING\n//Update calls with an object thus the things to update\n//You can also add new property to it\n//We can also delete by passing null to the attribute\n\n// database.ref().update({\n//   name: \"Hicotek\",\n//   age: 31,\n//   job: \"Programmer\",\n//   \"location/city\": \"Kumasi\",\n//   single: null\n// });\n\n//FETCHING DATA\n\n//METHOD 1:\n\n//This fetches only once and doesn't fetch upon changes unless we make another request to\n//We can fetch data by subscribing or a signle time\n//What you pass to ref is what it will return\n\n// database\n//   .ref()\n//   .once(\"value\")\n//   .then(snapShot => {\n//     //We pass an argument to .then which is a snapShot which represnt the actual data\n//     //The snapShot contains a lot of functions so to pull out our data we use .val()\n\n//     const data = snapShot.val();\n//     console.log(data);\n//   })\n//   .catch(err => {\n//     console.log(\"Fetching data failed\", err);\n//   });\n\n//METHOD 2\n//Since this will keep runing overtime we don't chain with a promise. Remember that promise alo returns data and error at one time\n\ndatabase.ref().on(\"value\", snapShot => {\n  console.log(snapShot.val());\n});\n\n//Changing data\n\nsetTimeout(() => {\n  database.ref(\"age\").set(80);\n}, 6000);\n"]},"metadata":{},"sourceType":"module"}