{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuel/Desktop/Development/expenses-manager/client/src/Components/CreateExpenses/index.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { addExpense, fetchExpenses } from '../../redux/actions/expenses-actions';\nimport store from '../../redux/store';\nimport { connect } from 'react-redux';\n\nclass CreateExpenses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      description: 'rtyty',\n      amount: '',\n      notes: '',\n      createdAt: moment(),\n      calendarFocused: false\n    };\n\n    this.onChangeInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onAmountChange = e => {\n      const amount = e.target.value;\n\n      if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n        this.setState(() => ({\n          amount\n        }));\n      }\n    };\n\n    this.onDateChange = createdAt => {\n      this.setState({\n        createdAt: createdAt\n      });\n    };\n\n    this.onFormSubmit = e => {\n      e.preventDefault();\n      store.dispatch(addExpense(this.state));\n      store.dispatch(fetchExpenses()); //This will gives live update of listing without refreshing\n    };\n  }\n\n  componentDidMount() {\n    store.dispatch(fetchExpenses());\n  }\n\n  render() {\n    console.log('From props', this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Create Expenses\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      autoFocus: true,\n      value: this.state.description,\n      name: \"description\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"amount\",\n      value: this.amount,\n      name: \"amount\",\n      onChange: this.onAmountChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(SingleDatePicker, {\n      date: this.state.createdAt //The current date when the app runs, we will use moment = The date to start\n      ,\n      onDateChange: this.onDateChange,\n      focused: this.state.calendarFocused,\n      onFocusChange: this.onFocusChange,\n      numberOfMonths: 1 //select only one thus only one calendar\n      ,\n      isOutsideRange: () => false //This allows us to view all past date and current or future\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Add notes (optional)\",\n      value: this.notes,\n      name: \"notes\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.onFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Submit\")), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"List of expenses\"), this.props.expensesFromCreateExpComponent.length, this.props.expensesFromCreateExpComponent.map(expense => {\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, expense.description);\n    }));\n  }\n\n}\n\nconst mapStateToprops = state => {\n  return {\n    expensesFromCreateExpComponent: state.expensesRootReducer.expenses\n  };\n};\n\nexport default connect(mapStateToprops, {\n  fetchExpenses\n})(CreateExpenses);","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/expenses-manager/client/src/Components/CreateExpenses/index.js"],"names":["React","Component","moment","SingleDatePicker","addExpense","fetchExpenses","store","connect","CreateExpenses","state","description","amount","notes","createdAt","calendarFocused","onChangeInput","e","setState","target","name","value","onAmountChange","match","onDateChange","onFormSubmit","preventDefault","dispatch","componentDidMount","render","console","log","props","onFocusChange","expensesFromCreateExpComponent","length","map","expense","mapStateToprops","expensesRootReducer","expenses"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { addExpense, fetchExpenses } from '../../redux/actions/expenses-actions';\nimport store from '../../redux/store'\nimport { connect } from 'react-redux';\nclass CreateExpenses extends Component {\n\n\n    state = {\n        description: 'rtyty',\n        amount: '',\n        notes: '',\n        createdAt: moment(),\n        calendarFocused: false,\n\n    };\n\n    //changeinput\n    onChangeInput = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    //OnAmountChange\n\n    //We want to allow users to type in only numbers with decimal value so we will use a regression to achieve that\n    onAmountChange = e => {\n        const amount = e.target.value;\n\n        if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n            this.setState(() => ({ amount }));\n        }\n    };\n\n    onDateChange = createdAt => {\n        this.setState({\n            createdAt: createdAt\n        });\n    };\n\n    //form submit\n\n    onFormSubmit = e => {\n        e.preventDefault();\n        store.dispatch(addExpense(this.state));\n        store.dispatch(fetchExpenses())//This will gives live update of listing without refreshing\n\n    };\n\n\n    componentDidMount() {\n        store.dispatch(fetchExpenses())\n    }\n\n    render() {\n\n        console.log('From props', this.props)\n        return (\n            <div>\n                <h1>Create Expenses</h1>\n                <form>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Description\"\n                        autoFocus\n                        value={this.state.description}\n                        name=\"description\"\n                        onChange={this.onChangeInput}\n                    />\n\n                    <input\n                        type=\"number\"\n                        placeholder=\"amount\"\n                        value={this.amount}\n                        name=\"amount\"\n                        onChange={this.onAmountChange}\n                    />\n\n                    <SingleDatePicker\n                        date={this.state.createdAt} //The current date when the app runs, we will use moment = The date to start\n                        onDateChange={this.onDateChange}\n                        focused={this.state.calendarFocused}\n                        onFocusChange={this.onFocusChange}\n                        numberOfMonths={1} //select only one thus only one calendar\n                        isOutsideRange={() => false} //This allows us to view all past date and current or future\n                    />\n                    <textarea\n                        placeholder=\"Add notes (optional)\"\n                        value={this.notes}\n                        name=\"notes\"\n                        onChange={this.onChangeInput}\n                    ></textarea>\n\n                    <button type=\"submit\" onClick={this.onFormSubmit}>\n                        Submit\n          </button>\n                </form>\n\n                <h1>List of expenses</h1>\n                {this.props.expensesFromCreateExpComponent.length}\n\n                {this.props.expensesFromCreateExpComponent.map((expense) => {\n                    return (\n                        <h3>{expense.description}</h3>\n                    )\n                })}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToprops = (state) => {\n    return {\n        expensesFromCreateExpComponent: state.expensesRootReducer.expenses\n    }\n}\n\nexport default connect(mapStateToprops, { fetchExpenses })(CreateExpenses);"]},"metadata":{},"sourceType":"module"}