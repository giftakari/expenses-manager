{"ast":null,"code":"import moment from \"moment\"; //Get visible expenses\n\nexport default ((expenses, {\n  text,\n  sortBy,\n  startDate,\n  endDate\n}) => {\n  return expenses.filter(expense => {\n    // const startDateMatch = typeof startDate !== 'number' || expense.createdAt >= startDate;\n    // const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\n    //Using moment to get real date\n    const createdAtMoment = moment(expense.createdAt);\n    const startDateMatch = startDate ? startDate.isSameOrBefore(createdAtMoment, \"day\") : true;\n    const endDateMatch = endDate ? endDate.isSameOrAfter(createdAtMoment, \"day\") : true;\n    const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\n    return startDateMatch && endDateMatch && textMatch;\n  }).sort((a, b) => {\n    if (sortBy === \"date\") {\n      return a.createdAt < b.createdAt ? 1 : -1;\n    } else if (sortBy === \"amount\") {\n      return a.amount < b.amount ? 1 : -1;\n    }\n\n    return a;\n  });\n});","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/expenses-manager/client/src/utils/expenses-selectors.js"],"names":["moment","expenses","text","sortBy","startDate","endDate","filter","expense","createdAtMoment","createdAt","startDateMatch","isSameOrBefore","endDateMatch","isSameOrAfter","textMatch","description","toLowerCase","includes","sort","a","b","amount"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB,C,CAEA;;AAEA,gBAAe,CAACC,QAAD,EAAW;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA;AAA3B,CAAX,KAAoD;AACjE,SAAOJ,QAAQ,CACZK,MADI,CACGC,OAAO,IAAI;AACjB;AACA;AAEA;AAEA,UAAMC,eAAe,GAAGR,MAAM,CAACO,OAAO,CAACE,SAAT,CAA9B;AACA,UAAMC,cAAc,GAAGN,SAAS,GAC5BA,SAAS,CAACO,cAAV,CAAyBH,eAAzB,EAA0C,KAA1C,CAD4B,GAE5B,IAFJ;AAGA,UAAMI,YAAY,GAAGP,OAAO,GACxBA,OAAO,CAACQ,aAAR,CAAsBL,eAAtB,EAAuC,KAAvC,CADwB,GAExB,IAFJ;AAGA,UAAMM,SAAS,GAAGP,OAAO,CAACQ,WAAR,CACfC,WADe,GAEfC,QAFe,CAENf,IAAI,CAACc,WAAL,EAFM,CAAlB;AAGA,WAAON,cAAc,IAAIE,YAAlB,IAAkCE,SAAzC;AACD,GAlBI,EAmBJI,IAnBI,CAmBC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,QAAIjB,MAAM,KAAK,MAAf,EAAuB;AACrB,aAAOgB,CAAC,CAACV,SAAF,GAAcW,CAAC,CAACX,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACD,KAFD,MAEO,IAAIN,MAAM,KAAK,QAAf,EAAyB;AAC9B,aAAOgB,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAb,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD;;AACD,WAAOF,CAAP;AACD,GA1BI,CAAP;AA2BD,CA5BD","sourcesContent":["import moment from \"moment\";\n\n//Get visible expenses\n\nexport default (expenses, { text, sortBy, startDate, endDate }) => {\n  return expenses\n    .filter(expense => {\n      // const startDateMatch = typeof startDate !== 'number' || expense.createdAt >= startDate;\n      // const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\n\n      //Using moment to get real date\n\n      const createdAtMoment = moment(expense.createdAt);\n      const startDateMatch = startDate\n        ? startDate.isSameOrBefore(createdAtMoment, \"day\")\n        : true;\n      const endDateMatch = endDate\n        ? endDate.isSameOrAfter(createdAtMoment, \"day\")\n        : true;\n      const textMatch = expense.description\n        .toLowerCase()\n        .includes(text.toLowerCase());\n      return startDateMatch && endDateMatch && textMatch;\n    })\n    .sort((a, b) => {\n      if (sortBy === \"date\") {\n        return a.createdAt < b.createdAt ? 1 : -1;\n      } else if (sortBy === \"amount\") {\n        return a.amount < b.amount ? 1 : -1;\n      }\n      return a;\n    });\n};\n"]},"metadata":{},"sourceType":"module"}