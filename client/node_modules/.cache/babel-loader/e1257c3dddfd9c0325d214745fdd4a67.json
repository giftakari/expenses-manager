{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuel/Desktop/Development/Projects/expenses-manager/client/src/Components/ExpensesForm/index.js\";\nimport React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\n\nclass ExpensesForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      description: this.props.expense ? this.props.expense.description : \"\",\n      amount: this.props.expense ? this.props.expense.amount : \"\",\n      //For the amount, the value found is a number and the form requires a string\n      notes: this.props.expense ? (this.props.expense.amount / 100).toString() : \"\",\n      //We will create an instance of moment to get a date at that specific point in time but not the time the code runs which is moment() therefore will pass our timestamp in\n      createdAt: this.props.expense ? moment(this.props.createdAt) : moment(),\n      calendarFocused: false,\n      error: \"\"\n    };\n\n    this.onAmountChange = e => {\n      const amount = e.target.value;\n\n      if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n        this.setState(() => ({\n          amount\n        }));\n      }\n    };\n\n    this.onChangeInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onDateChange = createdAt => {\n      this.setState({\n        createdAt: createdAt\n      });\n    };\n\n    this.onFocusChange = ({\n      focused\n    }) => {\n      this.setState({\n        calendarFocused: focused\n      });\n    };\n\n    this.onFormSubmit = e => {\n      e.preventDefault();\n\n      if (!this.state.description || !this.state.amount) {\n        //set error\n        this.setState({\n          error: \"Please provide amount\"\n        });\n        console.log(\"ERROR\");\n      } else {\n        this.props.onSubmit({\n          //Remember that this action creater receives object as argument\n          //We have to convert the values coming from the form to proper format for example the createdAt field this contains a whole bunch of methods and properties so we will use moment.valueOf() to get the actual date in a number format\n          description: this.state.description,\n          amount: parseFloat(this.state.amount, 10) * 100,\n          createdAt: this.state.createdAt.valueOf(),\n          //this is from moment for us to get the value as a number\n          notes: this.state.notes\n        }); //clear error\n\n        this.setState({\n          error: \"\"\n        });\n      }\n    };\n  }\n\n  render() {\n    //Destructure state\n    const _this$state = this.state,\n          description = _this$state.description,\n          amount = _this$state.amount,\n          notes = _this$state.notes;\n    return React.createElement(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"ExpensesForm\"), this.state.error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.error), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      autoFocus: true,\n      value: description,\n      name: \"description\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"amount\",\n      value: amount,\n      name: \"amount\",\n      onChange: this.onAmountChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(SingleDatePicker, {\n      date: this.state.createdAt //The current date when the app runs, we will use moment = The date to start\n      ,\n      onDateChange: this.onDateChange,\n      focused: this.state.calendarFocused,\n      onFocusChange: this.onFocusChange,\n      numberOfMonths: 1 //select only one thus only one calendar\n      ,\n      isOutsideRange: () => false //This allows us to view all past date and current or future\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Add notes (optional)\",\n      value: notes,\n      name: \"notes\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.onFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default ExpensesForm;","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/Projects/expenses-manager/client/src/Components/ExpensesForm/index.js"],"names":["React","Component","moment","SingleDatePicker","ExpensesForm","state","description","props","expense","amount","notes","toString","createdAt","calendarFocused","error","onAmountChange","e","target","value","match","setState","onChangeInput","name","onDateChange","onFocusChange","focused","onFormSubmit","preventDefault","console","log","onSubmit","parseFloat","valueOf","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\n\nclass ExpensesForm extends Component {\n  //We are reconstructing our state because we want to add eit function into it. all what it means is that if there is no data found by that id we will use the default data to avoid errors\n\n  state = {\n    description: this.props.expense ? this.props.expense.description : \"\",\n    amount: this.props.expense ? this.props.expense.amount : \"\",\n    //For the amount, the value found is a number and the form requires a string\n    notes: this.props.expense\n      ? (this.props.expense.amount / 100).toString()\n      : \"\",\n\n    //We will create an instance of moment to get a date at that specific point in time but not the time the code runs which is moment() therefore will pass our timestamp in\n\n    createdAt: this.props.expense ? moment(this.props.createdAt) : moment(),\n    calendarFocused: false,\n    error: \"\"\n  };\n\n  //OnAmountChange\n\n  //We want to allow users to type in only numbers with decimal value so we will use a regression to achieve that\n  onAmountChange = e => {\n    const amount = e.target.value;\n\n    if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n      this.setState(() => ({ amount }));\n    }\n  };\n\n  //changeinput\n  onChangeInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  //OndateChange\n\n  //This takes moment date as argument and in our case it's createdAt\n\n  //The datePicker allows you to choose the current and future date only\n\n  //We will pass moment date to this function and this will be done by the react library automatically. So you only update the  moment date in our sate with the moment object passed and this will once again will be passed in automatically for us. This is when a user picks a new date and will set the picked date to former state.\n  onDateChange = createdAt => {\n    this.setState({\n      createdAt: createdAt\n    });\n  };\n\n  //Destructing the object and grab only focused and set them to state and this done automatically by react date api and this is how the documentation stated\n\n  //This is where react library changes the value\n  onFocusChange = ({ focused }) => {\n    this.setState({\n      calendarFocused: focused\n    });\n  };\n\n  //form submit\n\n  onFormSubmit = e => {\n    e.preventDefault();\n\n    if (!this.state.description || !this.state.amount) {\n      //set error\n      this.setState({\n        error: \"Please provide amount\"\n      });\n      console.log(\"ERROR\");\n    } else {\n      this.props.onSubmit({\n        //Remember that this action creater receives object as argument\n\n        //We have to convert the values coming from the form to proper format for example the createdAt field this contains a whole bunch of methods and properties so we will use moment.valueOf() to get the actual date in a number format\n\n        description: this.state.description,\n        amount: parseFloat(this.state.amount, 10) * 100,\n        createdAt: this.state.createdAt.valueOf(), //this is from moment for us to get the value as a number\n        notes: this.state.notes\n      });\n\n      //clear error\n      this.setState({\n        error: \"\"\n      });\n    }\n  };\n  render() {\n    //Destructure state\n    const { description, amount, notes } = this.state;\n    return (\n      <div style={{ color: \"red\" }}>\n        <h3>ExpensesForm</h3>\n        {this.state.error && <p>{this.state.error}</p>}\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Description\"\n            autoFocus\n            value={description}\n            name=\"description\"\n            onChange={this.onChangeInput}\n          />\n\n          <input\n            type=\"number\"\n            placeholder=\"amount\"\n            value={amount}\n            name=\"amount\"\n            onChange={this.onAmountChange}\n          />\n\n          <SingleDatePicker\n            date={this.state.createdAt} //The current date when the app runs, we will use moment = The date to start\n            onDateChange={this.onDateChange}\n            focused={this.state.calendarFocused}\n            onFocusChange={this.onFocusChange}\n            numberOfMonths={1} //select only one thus only one calendar\n            isOutsideRange={() => false} //This allows us to view all past date and current or future\n          />\n\n          <textarea\n            placeholder=\"Add notes (optional)\"\n            value={notes}\n            name=\"notes\"\n            onChange={this.onChangeInput}\n          ></textarea>\n\n          <button type=\"submit\" onClick={this.onFormSubmit}>\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ExpensesForm;\n"]},"metadata":{},"sourceType":"module"}